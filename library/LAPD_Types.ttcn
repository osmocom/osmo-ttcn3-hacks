/* LAPDm definitions according to ITU-T Q.921
 * (C) 2017-2020 by Harald Welte <laforge@gnumonks.org>
 * All rights reserved.
 *
 * Released under the terms of GNU General Public License, Version 2 or
 * (at your option) any later version.
 *
 * SPDX-License-Identifier: GPL-2.0-or-later
 */

module LAPD_Types {

import from General_Types all;
import from Osmocom_Types all;

type uint6_t LapdSapi;
type uint7_t LapdTei;
type BIT2 LapdSBits;
type BIT3 LapdUBits;
type BIT2 LapdU2Bits;

/* Section 3.3.2 / Table 1*/
const boolean cr_UO_CMD := false;
const boolean cr_UO_RSP := true;
const boolean cr_UT_CMD := true;
const boolean cr_UT_RSP := false;

/* Figure 5 */
type record LapdAddressField {
	LapdSapi	sapi,
	boolean		c_r,
	boolean		ea0 (false),
	LapdTei		tei,
	boolean		ea1 (true)
} with { variant "FIELDORDER(msb)" };

template (present) LapdAddressField
tr_LapdAddr(template (present) LapdTei tei := ?,
	    template (present) LapdSapi sapi := ?,
	    template (present) boolean c_r) := {
	sapi := sapi,
	c_r := c_r,
	ea0 := false,
	tei := tei,
	ea1 := true
};

template (value) LapdAddressField
ts_LapdAddr(template (value) LapdTei tei,
	     template (value) LapdSapi sapi, boolean c_r) := {
	sapi := sapi,
	c_r := c_r,
	ea0 := false,
	tei := tei,
	ea1 := true
};

/* Table 4 */
type record LapdCtrlI {
	uint7_t		n_s,
	BIT1		spare ('0'B),
	uint7_t		n_r,
	boolean		p
} with { variant "FIELDORDER(msb)" };

type record LapdCtrlS {
	BIT4		reserved ('0000'B),
	LapdSBits	s,
	BIT2		spare ('01'B),
	uint8_t		n_r,
	boolean		p_f
} with { variant "FIELDORDER(msb)" };

type record LapdCtrlU {
	LapdUBits	u,
	boolean		p_f,
	LapdU2Bits	u2,
	BIT2		spare ('11'B)
} with { variant "FIELDORDER(msb)" };

type union LapdCtrl {
	LapdCtrlS	s,
	LapdCtrlU	u,
	LapdCtrlI	i,
	uint8_t		other
} with { variant "TAG(u, spare = '11'B;
		      s, spare = '01'B;
		      i, spare = '0'B;
		      other, OTHERWISE)" };
		/*      )" }; */


template (present) LapdCtrl tr_LapdCtrlU := {
	u := { u := ?, p_f := ?, u2 := ?, spare := '11'B }
};

template (present) LapdCtrl tr_LapdCtrlS := {
	s := { reserved := '0000'B, s := ?, spare := '01'B, n_r := ?, p_f := ? }
};

template (present) LapdCtrl
tr_LapdCtrlI(template (present) uint7_t nr, template (present) uint7_t ns,
	     template (present) boolean p) := {
	i := { n_s := ns, spare := '0'B, n_r := nr, p := p }
};
template (value) LapdCtrl
ts_LapdCtrlI(uint7_t nr, uint7_t ns, boolean p) := {
	i := { n_s := ns, spare := '0'B, n_r := nr, p := p }
};

template (present) LapdCtrl
tr_LapdCtrlRR(template (present) uint7_t nr, template (present) boolean pf)
modifies tr_LapdCtrlS := {
	s := { s := '00'B, n_r := nr, p_f := pf }
};
template (value) LapdCtrl ts_LapdCtrlRR(uint7_t nr, boolean pf) := {
	s := { reserved := '0000'B, s := '00'B, spare := '01'B, n_r := nr, p_f := pf }
};

template (present) LapdCtrl
tr_LapdCtrlRNR(template (present) uint7_t nr, template (present) boolean pf)
modifies tr_LapdCtrlS := {
	s := { s := '01'B, n_r := nr, p_f := pf }
};

template (present) LapdCtrl
tr_LapdCtrlREJ(template (present) uint7_t nr, template (present) boolean pf)
modifies tr_LapdCtrlS := {
	s := { s := '10'B, n_r := nr, p_f := pf }
};
template (value) LapdCtrl
ts_LapdCtrlREJ(uint7_t nr, boolean pf)  := {
	s := { reserved := '0000'B, s := '10'B, spare := '01'B, n_r := nr, p_f := pf }
};

template (present) LapdCtrl
tr_LapdCtrlSABM(template (present) boolean p) := {
	u := { u := '001'B, p_f := p, u2 := '11'B, spare := '11'B }
};
template (value) LapdCtrl
ts_LapdCtrlSABM(boolean p) := {
	u := { u := '001'B, p_f := p, u2 := '11'B, spare := '11'B }
};

template (present) LapdCtrl
tr_LapdCtrlDM(template (present) boolean f) := {
	u := { u := '000'B, p_f := f, u2 := '11'B, spare := '11'B }
};
template (value) LapdCtrl
ts_LapdCtrlDM(boolean f) := {
	u := { u := '000'B, p_f := f, u2 := '11'B, spare := '11'B }
};

template (present) LapdCtrl
tr_LapdCtrlUI(template (present) boolean p := false) := {
	u := { u := '000'B, p_f := p, u2 := '00'B, spare := '11'B }
};
template (value) LapdCtrl
ts_LapdCtrlUI(boolean p := false) := {
	u := { u := '000'B, p_f := p, u2 := '00'B, spare := '11'B }
};

template (present) LapdCtrl
tr_LapdCtrlDISC(template (present) boolean p) := {
	u := { u := '010'B, p_f := p, u2 := '00'B, spare := '11'B }
};
template (value) LapdCtrl
ts_LapdCtrlDISC(boolean p) := {
	u := { u := '010'B, p_f := p, u2 := '00'B, spare := '11'B }
};

template (present) LapdCtrl
tr_LapdCtrlUA(template (present) boolean f) modifies tr_LapdCtrlU := {
	u := { u := '011'B, p_f := f, u2 := '00'B, spare := '11'B }
};
template (value) LapdCtrl
ts_LapdCtrlUA(boolean f) := {
	u := { u := '011'B, p_f := f, u2 := '00'B, spare := '11'B }
};

template (present) LapdCtrl
tr_LapdCtrlFRMR(template (present) boolean f) modifies tr_LapdCtrlU := {
	u := { u := '100'B, p_f := f, u2 := '01'B, spare := '11'B }
};
template (value) LapdCtrl
ts_LapdCtrlFRMR(boolean f) := {
	u := { u := '100'B, p_f := f, u2 := '01'B, spare := '11'B }
};

template (present) LapdCtrl
tr_LapdCtrlXID(template (present) boolean p_f) modifies tr_LapdCtrlU := {
	u := { u := '101'B, p_f := p_f, u2 := '11'B, spare := '11'B }
};
template (value) LapdCtrl
ts_LapdCtrlXID(boolean p_f) := {
	u := { u := '101'B, p_f := p_f, u2 := '11'B, spare := '11'B }
};


external function dec_LapdAddressField(in octetstring stream) return LapdAddressField
	with { extension "prototype(convert) decode(RAW)" };
external function enc_LapdAddressField(in LapdAddressField f) return octetstring
	with { extension "prototype(convert) encode(RAW)" };

external function dec_LapdCtrl(in octetstring stream) return LapdCtrl
	with { extension "prototype(convert) decode(RAW)" };

external function dec_LapdCtrlU(in octetstring stream) return LapdCtrlU
	with { extension "prototype(convert) decode(RAW)" };


type record LapdFrame {
	LapdAddressField	addr,
	LapdCtrl		ctrl,
	octetstring		payload	// zero-length in Frame A 
} with { variant "FIELDORDER(msb)" };

external function enc_LapdFrame(in LapdFrame si) return octetstring
	with { extension "prototype(convert) encode(RAW)" };
external function dec_LapdFrame(in octetstring stream) return LapdFrame
	with { extension "prototype(convert) decode(RAW)" };

template (value) LapdFrame
ts_LAPD_SABM(LapdTei tei, LapdSapi sapi, boolean c_r, boolean p, octetstring l3) := {
	addr := ts_LapdAddr(tei, sapi, c_r),
	ctrl := ts_LapdCtrlSABM(p),
	payload := l3
}
template (present) LapdFrame
tr_LAPD_SABM(template (present) LapdTei tei, template (present) LapdSapi sapi,
	     template (present) boolean c_r, template (present) boolean p,
	     template (present) octetstring l3) := {
	addr := tr_LapdAddr(tei, sapi, c_r),
	ctrl := tr_LapdCtrlSABM(p),
	payload := l3
}

template (value) LapdFrame
ts_LAPD_UA(LapdTei tei, LapdSapi sapi, boolean c_r, boolean f, octetstring l3) := {
	addr := ts_LapdAddr(tei, sapi, c_r),
	ctrl := ts_LapdCtrlUA(f),
	payload := l3
}
template (present) LapdFrame
tr_LAPD_UA(template (present) LapdTei tei, template (present) LapdSapi sapi,
		     template (present) boolean c_r, template (present) boolean f,
		     template (present) octetstring l3) := {
	addr := tr_LapdAddr(tei, sapi, c_r),
	ctrl := tr_LapdCtrlUA(f),
	payload := l3
}

template (value) LapdFrame
ts_LAPD_DM(LapdTei tei, LapdSapi sapi, boolean c_r, boolean f) := {
	addr := ts_LapdAddr(tei, sapi, c_r),
	ctrl := ts_LapdCtrlDM(f),
	payload := ''O
}
template (present) LapdFrame
tr_LAPD_DM(template (present) LapdTei tei, template (present) LapdSapi sapi,
	   template (present) boolean c_r, template (present) boolean f) := {
	addr := tr_LapdAddr(tei, sapi, c_r),
	ctrl := tr_LapdCtrlDM(f),
	payload := ''O
}

template (value) LapdFrame
ts_LAPD_DISC(LapdTei tei, LapdSapi sapi, boolean c_r, boolean p) := {
	addr := ts_LapdAddr(tei, sapi, c_r),
	ctrl := ts_LapdCtrlDISC(p),
	payload := ''O
}
template (present) LapdFrame
tr_LAPD_DISC(template (present) LapdTei tei, template (present) LapdSapi sapi,
	     template (present) boolean c_r, template (present) boolean p) := {
	addr := tr_LapdAddr(tei, sapi, c_r),
	ctrl := tr_LapdCtrlDISC(p),
	payload := ''O
}

template (value) LapdFrame
ts_LAPD_UI(LapdTei tei, LapdSapi sapi, boolean c_r, octetstring l3) := {
	addr := ts_LapdAddr(tei, sapi, c_r),
	ctrl := ts_LapdCtrlUI,
	payload := l3
}
template (present) LapdFrame
tr_LAPD_UI(template (present) LapdTei tei, template (present) LapdSapi sapi,
	   template (present) boolean c_r, template (present) octetstring l3) := {
	addr := tr_LapdAddr(tei, sapi, c_r),
	ctrl := tr_LapdCtrlUI,
	payload := l3
}

template (value) LapdFrame
ts_LAPD_I(LapdTei tei, LapdSapi sapi, boolean c_r, boolean p, uint7_t nr,
	  uint7_t ns, octetstring l3, boolean m := false) := {
	addr := ts_LapdAddr(tei, sapi, c_r),
	ctrl := ts_LapdCtrlI(nr, ns, p),
	payload := l3
}
template (present) LapdFrame
tr_LAPD_I(template (present) LapdTei tei, template (present) LapdSapi sapi,
	  template (present) boolean c_r, template (present) boolean p,
	  template (present) uint7_t nr, template (present) uint7_t ns,
	  template (present) octetstring l3, template (present) boolean m := false) := {
	addr := tr_LapdAddr(tei, sapi, c_r),
	ctrl := tr_LapdCtrlI(nr, ns, p),
	payload := l3
}

template (value) LapdFrame
ts_LAPD_RR(LapdTei tei, LapdSapi sapi, boolean c_r, boolean p, uint7_t nr) := {
	addr := ts_LapdAddr(tei, sapi, c_r),
	ctrl := ts_LapdCtrlRR(nr, p),
	payload := ''O
}
template (present) LapdFrame
tr_LAPD_RR(template (present) LapdTei tei, template (present) LapdSapi sapi,
	   template (present) boolean c_r, template (present) boolean p,
	   template (present) uint7_t nr) := {
	addr := tr_LapdAddr(tei, sapi, c_r),
	ctrl := tr_LapdCtrlRR(nr, p),
	payload := ''O
}

template (value) LapdFrame ts_LAPD_REJ(LapdTei tei, LapdSapi sapi, boolean c_r,
					boolean p, uint7_t nr) := {
	addr := ts_LapdAddr(tei, sapi, c_r),
	ctrl := ts_LapdCtrlREJ(nr, p),
	payload := ''O
}
template (present) LapdFrame
tr_LAPD_REJ(template (present) LapdTei tei, template (present) LapdSapi sapi,
	     template (present) boolean c_r, template (present) boolean p,
	     template (present) uint7_t nr) := {
	addr := tr_LapdAddr(tei, sapi, c_r),
	ctrl := tr_LapdCtrlREJ(nr, p),
	payload := ''O
}


/* Table 8/Q.921 */
type enumerated TeiMgmtMsgType {
	IDENTITY_REQUEST	('00000001'B),
	IDENTITY_ASSIGNED	('00000010'B),
	IDENTITY_DENIED		('00000011'B),
	IDENTITY_CHECK_REQ	('00000100'B),
	IDENTITY_CHECK_RESP	('00000101'B),
	IDENTITY_REMOVE		('00000110'B),
	IDENTITY_VERIFY		('00000111'B)
} with { variant "FIELDLENGTH(8)" };
type record TeiMgmtMsg {
	BIT8		me_id ('00001111'B), /* management entity identifier */
	uint16_t	ri,	/* reference number */
	TeiMgmtMsgType	msg_type,
	uint7_t		ai,
	BIT1		e
};

template (value) TeiMgmtMsg ts_TEI(TeiMgmtMsgType msgt, uint16_t ri, uint7_t ai) := {
	me_id := '00001111'B,
	ri := ri,
	msg_type := msgt,
	ai := ai,
	e := '1'B
}

external function enc_TeiMgmtMsg(in TeiMgmtMsg si) return octetstring
	with { extension "prototype(convert) encode(RAW)" };
external function dec_TeiMgmtMsg(in octetstring stream) return TeiMgmtMsg
	with { extension "prototype(convert) decode(RAW)" };

template (value) TeiMgmtMsg
ts_TEI_IdRequest(uint16_t ri, uint7_t ai) := ts_TEI(IDENTITY_REQUEST, ri, ai);

template (value) TeiMgmtMsg
ts_TEI_IdAssigned(uint16_t ri, uint7_t ai) := ts_TEI(IDENTITY_ASSIGNED, ri, ai);

template (value) TeiMgmtMsg
ts_TEI_IdDenied(uint16_t ri, uint7_t ai) := ts_TEI(IDENTITY_DENIED, ri, ai);

template (value) TeiMgmtMsg
ts_TEI_IdCheckReq(uint16_t ri, uint7_t ai) := ts_TEI(IDENTITY_CHECK_REQ, ri, ai);

template (value) TeiMgmtMsg
ts_TEI_IdCheckResp(uint16_t ri, uint7_t ai) := ts_TEI(IDENTITY_CHECK_RESP, ri, ai);

template (value) TeiMgmtMsg
ts_TEI_IdRemove(uint16_t ri, uint7_t ai) := ts_TEI(IDENTITY_REMOVE, ri, ai);

template (value) TeiMgmtMsg
ts_TEI_IdVerify(uint16_t ri, uint7_t ai) := ts_TEI(IDENTITY_VERIFY, ri, ai);


/* Q.921bis Name:ID_Rmv */
template (present) LapdFrame
tr_ID_Rmv(template (present) LapdTei tei) := {
	addr := ts_LapdAddr(tei := 127, sapi := 63, c_r := true),
	ctrl := ts_LapdCtrlUI(p := false)
}

/* Q.921bis Name:ID_Ver */
template (present) LapdFrame
tr_ID_Ver(template (present) LapdTei tei) := {
	addr := ts_LapdAddr(tei := 127, sapi := 63, c_r := true),
	ctrl := ts_LapdCtrlUI(p := false)
}




} with { encode "RAW"; /*variant "FIELDORDER(msb)" */}
