module SGP32Definitions_Types {

import from SGP32Definitions all;
import from Native_Functions all;

external function dec_EsipaMessageFromIpaToEim(in octetstring stream) return EsipaMessageFromIpaToEim
with { extension "prototype(convert) decode(BER:BER_ACCEPT_ALL)" };
external function enc_EsipaMessageFromIpaToEim(in EsipaMessageFromIpaToEim msg) return octetstring
with { extension "prototype(convert) encode(BER:BER_ENCODE_DER)" };

external function dec_EsipaMessageFromEimToIpa(in octetstring stream) return EsipaMessageFromEimToIpa
with { extension "prototype(convert) decode(BER:BER_ACCEPT_ALL)" };
external function enc_EsipaMessageFromEimToIpa(in EsipaMessageFromEimToIpa msg) return octetstring
with { extension "prototype(convert) encode(BER:BER_ENCODE_DER)" };

external function dec_EuiccPackageResult(in octetstring stream) return EuiccPackageResult
with { extension "prototype(convert) decode(BER:BER_ACCEPT_ALL)" };
external function enc_EuiccPackageResult(in EuiccPackageResult msg) return octetstring
with { extension "prototype(convert) encode(BER:BER_ENCODE_DER)" };

external function dec_GetCertsResponse(in octetstring stream) return GetCertsResponse
with { extension "prototype(convert) decode(BER:BER_ACCEPT_ALL)" };
external function enc_GetCertsResponse(in GetCertsResponse msg) return octetstring
with { extension "prototype(convert) encode(BER:BER_ENCODE_DER)" };

external function dec_GetEimConfigurationDataResponse(in octetstring stream) return GetEimConfigurationDataResponse
with { extension "prototype(convert) decode(BER:BER_ACCEPT_ALL)" };
external function enc_GetEimConfigurationDataResponse(in GetEimConfigurationDataResponse msg) return octetstring
with { extension "prototype(convert) encode(BER:BER_ENCODE_DER)" };

external function dec_EnableUsingDDResponse(in octetstring stream) return EnableUsingDDResponse
with { extension "prototype(convert) decode(BER:BER_ACCEPT_ALL)" };
external function enc_EnableUsingDDResponse(in EnableUsingDDResponse msg) return octetstring
with { extension "prototype(convert) encode(BER:BER_ENCODE_DER)" };

external function dec_ProfileRollbackRequest(in octetstring stream) return ProfileRollbackRequest
with { extension "prototype(convert) decode(BER:BER_ACCEPT_ALL)" };
external function enc_ProfileRollbackRequest(in ProfileRollbackRequest msg) return octetstring
with { extension "prototype(convert) encode(BER:BER_ENCODE_DER)" };

external function dec_ProfileRollbackResponse(in octetstring stream) return ProfileRollbackResponse
with { extension "prototype(convert) decode(BER:BER_ACCEPT_ALL)" };
external function enc_ProfileRollbackResponse(in ProfileRollbackResponse msg) return octetstring
with { extension "prototype(convert) encode(BER:BER_ENCODE_DER)" };

}
