module LAPD_Primitives {

import from LAPD_Types all;

type enumerated PrimOperation {
	REQUEST,
	RESPONSE,
	INDICATION,
	CONFIRM
};

type record LAPD_DL_Prim {
	LapdTei			tei,
	LapdSapi		sapi,
	LAPD_DL			primitive,
	PrimOperation		operation
}
type union LAPD_DL {
	LapdDlEstablish		dl_establish,
	LapdDlRelease		dl_release,
	LapdDlData		dl_data,
	LapdDlUnitData		dl_unitdata
};
type record LapdDlEstablish {
};
type record LapdDlRelease {
};
type record LapdDlData {
	octetstring payload
};
type record LapdDlUnitData {
	octetstring payload
};

type record LAPD_MDL_Prim {
	LAPD_MDL		primitive,
	PrimOperation		operation
}
type union LAPD_MDL {
	LapdMdlAssign		mdl_assign,
	LapdMdlRemove		mdl_remove,
	LapdMdlError		mdl_error,
	LapdMdlUnitData		mdl_unitdata,
	LapdMdlXid		mdl_xid
};
type record LapdMdlAssign {
	LapdTei			tei
	//ces
};
type record LapdMdlRemove {
	LapdTei			tei
	//ces
};
type record LapdMdlError {
	charstring		reason
};
type record LapdMdlUnitData {
	octetstring		lm_pdu
};
type record LapdMdlXid {
	octetstring		cm_pdu
};

type record LAPD_PH_Prim {
	LAPD_PH			primitive,
	PrimOperation		operation
}
type union LAPD_PH {
	LapdPhData		ph_data,
	LapdPhActivate		ph_activate,
	LapdPhDeactivate	ph_deactivate
};
type record LapdPhData {
	// priority
	octetstring		data
};
type record LapdPhActivate {
}
type record LapdPhDeactivate {
}

type record LAPD_MPH_Prim {
	Lapd_MPH		primitive,
	PrimOperation		operation
};
type union Lapd_MPH {
	LapdMphActivate		mph_activate,
	LapdMphDeactivate	mph_deactivate,
	LapdMphInformation	mph_information
};
type record LapdMphActivate {
};
type record LapdMphDeactivate {
};
type record LapdMphInformation {
	// connected/disconnected
};

type union LAPD_Primitive {
	LAPD_DL_Prim		dl,
	LAPD_MDL_Prim		mdl,
	LAPD_PH_Prim		ph,
	LAPD_MPH_Prim		mph
};

external function f_enc_LAPD_Primitive(in LAPD_Primitive inp) return octetstring
	with { extension "prototype(convert) encode(JSON)" }
external function f_dec_LAPD_Primitive(in octetstring inp) return LAPD_Primitive
	with { extension "prototype(convert) decode(JSON)" }


} with { encode "JSON" }
